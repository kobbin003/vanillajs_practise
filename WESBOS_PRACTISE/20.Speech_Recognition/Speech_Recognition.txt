   < SpeechRecognition >

- create an instance of SpeechRecognition object.
  e.g const recognition = new SpeechRecognition.

"interimResults" -> if true, shows all the result.
                    If false, show only the last result.

"continuous" -> if true, no new paragraph is added; instead the old text/speech is 
                         concated with the recent text/speech.
"Lang" -> 'en-US'


* * * <eventlistener> listens for "result".
                                  "end"-> perform '(new SpeechRecogniton()).start'

     < e.results >
--- > ie.result = SpeechRecognitionResultList
      Which contains an array of length:1, with item named SpeechRecognitionResult
      Which contains an array of length:1, with item named SpeechRecognitionAlternative
      Which contains an object { transcript:"abcdefg..", confidence: 0123..}

Therefore text/speech = e.results[0][0].transcript;


     < isFinal >
--- > a> if e.results.isFinal or e.results.isFinal[0][0], then old gets replaced by the 
         new I.e no new line is formed.
      b> if e.results[0].isFinal, then the new is written in a new line.

a> + continuous=true; ---->every time the old is replaced by the new.
a> + continuous=false; --->the new is added along with the old in a single line. 

b> + continuous=true; ---->the new is added with the old in the next/new line.
b> + continuous=false; --->the new is added in a new line. 
      

    < without isFinal >
--- > don't put the interimResults as true.
      This will automatically choose the last result.


 * * * * * * < C S S >  * * * * * * :
     < margin with 3 input only >
--- > margin: 0 0 20px;  ---->>> means margin-top:0, margin-left & margin-right:0
                                   Margin-bottom: 20px;

     < REM >
--- > its the same as "em", only it is relative to the root element instead of 
      Parent element as it is in the case of "em".

     < POSITION OF CHANGING ELEMENTS >
---> putting flex on a size-changing element is not good.
     Because it will keep on changing its position with the change in its size.
     Therefore just use {position: relative;
                         Top: x px;
                         Left: y px;
                        }
      Like we did with ".words"

     < GRADIENT : used to simulate tabular column or rows >
---> put the neighbour color to same % to attain the border.

     < BACKGROUND-SIZE >
---> if the content maxes-out of the given size, the background loops.
     Here, the background looped whenever a new <p> was added. 

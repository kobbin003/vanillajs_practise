--- customised background size(used incase of background image):-
	{
	   background-size: 'width'vw 'height'px;
	}

---- using justify-content: space-around/between; to spread the child elements inside the parent element with equal       distance between them.(without using the padding: 0 'x'px;)
     [Note that ul's width: 100%;or else it won't work.]

- * * *//see the difference of placing const navBarTop outside and inside the function whenScroll().

Q> how to add two variables inside literal templates?
e.g: article.style.top = `${articleoffsetTop + navBarheight}px`;

* * * * * * * * getComputedStyle ...getPropertyValue * * * * * * * * * * *
Q> how to get margin of DOM element?
Ans:window.getComputedStyle(variable-of-the-selected-element).getPropertyValue('name-of-the-property');
    *** unlikely, this returns the value with "px" suffix, I.e it returns a "string" value.
    Also this creates issue when we have to add this value to other value(because normally the property value of an element, e.g navBar.offsetTop, is returned in "number" value.

    Therefore we have to go through the following steps:
    1> splice : to remove the "px" suffix;
2> Number(spliced-variable) : to convert the spliced-variable to "number" because splice returns "string".



      <SLIDING IN THE TITLE>
- watch out for this way of adding class to an element in CSS:
e.g 1>li.title{}
    2>li.title a{}
	3>body.titleslide li.title{}--. this means <li> with class name "title" inside body with class "titleslide".
	
	PROS:
	> instead of adding class(with the required property) to the selected element (using "queryselector"), you can add class(a virtual one) to the "document.body" and use the above mentioned way to add properties to selected elements(using css selector) when the class is added to the body.
	> This also helps in reducing the number of different class names.
--- see ho "TRANSITION" works on li.title{} and body.titleslide li.title{};
     First states that transition "this" apply on <li> with class "title", whereas the later states that transition "this" apply on <li> with class "title" when "titleslide" class is added to the body.
	 Therefore, the former is effective when scroll is less than "navBarTop", whereas the later is effective when the scroll is more than the "navBarTop".
	
--- flex: 1;
     used to spread the child elements evenly.
    -the proble with using justify-content :space-around is that it takes into account the hidden or max-width:0;
    Therefore it is better to use flex: 1, to spread out the child elements evenly;

--- point to be noted:- body.titleslide article{transform: scale(1);}--> this makes the article slide over the navbar.

---- max-width:
    *> if width of window > max-width; let the browser use max-width.
    *> if width of window < max-width; let the browser use width.i.e it works like width:100%,i.e it stretches according to the size of the browser/window. 


   <INSERTBEFORE>
--- this can be used instead of appending child, because we can select where to insert.
    container.insertBefore(new-child, before-which-child);
    ***** the problem with this method is that we cannot apply "transition" effect on the creation of child/element.
    Therefore the "show and hide" is straightforward.
	
	<MAX-WIDTH IN FLEX WORKS DIFFERENT>
--- By default if we put {flex:1;} on flex item, there is "min-width" kinda applied;
    So, if we apply width: 0; it won't be exactly 0;
	Therefore, use "max-width:0" to make the element width to 0;
	????? maybe it has to do with flex-grow, flex-basis etc. ?????????

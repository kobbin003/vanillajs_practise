   <WHITE-SPACE: NOWRAP>
--- use this to expand elements outside of the body/window and apply {overflow-x: scroll;}
    to have scrolling effect.

   <INLINE-FLEX>
--- we could use inline-block, but we won't be able to center the item i.e the digits  
    easily as we could do in a flex container.

   <USER-SELECT>
--- double tapping on word/number enables selection.

   <BOX-SHADOW: INSET>
--- box-shadow: inset 0 0 0 10px rgba(0,0,0,0.15);
    This puts the shadow under/inside instead of outside.
--- this can be used to add shadow on all the four sides.

   <BOX-SIZING>
--- box-sizing:content-box/border-box.
    The later one is universal where content, padding and border is included when we
    mention width of height; in the former height or width means only content.

   <PERSPECTIVE>
--- lower value == more depth in view.
    Higher value == lower depth in view.

   <ROTATE>
--- see how rotate works on different axis.

   <BRINGING INLINE ITEMS CLOSER>
--- two ways:
    1> using {transform:scaleX(1.45);}, like we used in this example along with rotateY for even
       And odd child elements. 
    2> using {margin: -90px;},
       * * * Negative(-ve) value for padding doesn't work.

* * * * * * * * * J A V A S C R I P T * * * * * * * * *
   <R E T U R N>
--- if we type just return, the function is stopped and returned.
    e.g mouse down, () =>{ if(!isdown) return; };

   <M O U S E  E V E N T>
--- * screenX/Y: relative to screen of monitor/laptop;
    * pageX/Y: relative to html;
    * clientX/Y: relative to the viewport/browser window.
    * offsetX/Y: relative to the current element.
   Therefore page and client will be same until we scroll the page.